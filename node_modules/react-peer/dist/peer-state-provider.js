"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PeerStateProvider = /** @class */ (function (_super) {
    __extends(PeerStateProvider, _super);
    function PeerStateProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            connections: [],
            brokerId: _this.props.brokerId,
            error: undefined,
        };
        _this.setPeer = function () {
            _this.cleanup();
            Promise.resolve().then(function () { return require('peerjs'); }).then(function (_a) {
                var Peer = _a.default;
                _this.peer = new Peer(_this.props.brokerId);
                _this.peer.on('open', function () {
                    if (_this.state.brokerId !== _this.peer.id) {
                        _this.setState({
                            brokerId: _this.peer.id,
                        });
                    }
                });
                _this.peer.on('connection', function (conn) {
                    _this.setState(function (prevState) { return ({ connections: prevState.connections.concat([conn]) }); });
                    // We want to immediately send the newly connected peer the current data.
                    conn.on('open', function () {
                        conn.send(_this.props.value);
                    });
                });
                _this.peer.on('error', function (error) { return _this.setState({ error: error }); });
            });
        };
        return _this;
    }
    PeerStateProvider.prototype.componentDidMount = function () {
        this.setPeer();
    };
    PeerStateProvider.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        if (prevProps.value !== this.props.value) {
            this.state.connections.forEach(function (conn) { return conn.send(_this.props.value); });
        }
        if (prevProps.brokerId !== this.props.brokerId) {
            this.setPeer();
        }
    };
    PeerStateProvider.prototype.cleanup = function () {
        if (this.peer) {
            this.peer.destroy();
        }
    };
    PeerStateProvider.prototype.componentWillUnmount = function () {
        this.cleanup();
    };
    PeerStateProvider.prototype.render = function () {
        var _a = this.state, connections = _a.connections, brokerId = _a.brokerId, error = _a.error;
        return this.props.children({ connections: connections, brokerId: brokerId, error: error });
    };
    PeerStateProvider.defaultProps = {
        brokerId: '',
    };
    return PeerStateProvider;
}(React.Component));
exports.default = PeerStateProvider;
