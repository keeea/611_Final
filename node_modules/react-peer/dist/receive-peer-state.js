"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReceivePeerState = /** @class */ (function (_super) {
    __extends(ReceivePeerState, _super);
    function ReceivePeerState() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            data: undefined,
            isConnected: false,
            error: undefined,
        };
        _this.setPeer = function () {
            _this.cleanup();
            Promise.resolve().then(function () { return require('peerjs'); }).then(function (_a) {
                var Peer = _a.default;
                var peerBrokerId = _this.props.peerBrokerId;
                if (!peerBrokerId) {
                    return;
                }
                _this.peer = new Peer(_this.props.brokerId);
                _this.peer.on('open', function () {
                    var peerBrokerId = _this.props.peerBrokerId;
                    var connection = _this.peer.connect(peerBrokerId);
                    connection.on('open', function () {
                        connection.on('data', function (receivedData) {
                            _this.setState({
                                data: receivedData,
                                isConnected: true,
                            });
                        });
                    });
                    connection.on('close', function () {
                        _this.setState({
                            isConnected: false,
                        });
                    });
                    connection.on('error', function (error) { return _this.setState({ error: error }); });
                });
                _this.peer.on('error', function (error) { return _this.setState({ error: error }); });
            });
        };
        _this.cleanup = function () {
            if (_this.peer) {
                _this.peer.destroy();
            }
        };
        return _this;
    }
    ReceivePeerState.prototype.componentDidMount = function () {
        this.setPeer();
    };
    ReceivePeerState.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.peerBrokerId !== this.props.peerBrokerId) {
            this.setPeer();
        }
    };
    ReceivePeerState.prototype.componentWillUnmount = function () {
        this.cleanup();
    };
    ReceivePeerState.prototype.render = function () {
        var _a = this.state, data = _a.data, isConnected = _a.isConnected, error = _a.error;
        return this.props.children({
            data: data,
            isConnected: isConnected,
            error: error,
        });
    };
    ReceivePeerState.defaultProps = {
        brokerId: '',
    };
    return ReceivePeerState;
}(React.Component));
exports.default = ReceivePeerState;
