import * as React from 'react';
export default class ReceivePeerState extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            data: undefined,
            isConnected: false,
            error: undefined,
        };
        this.setPeer = () => {
            this.cleanup();
            import('peerjs').then(({ default: Peer }) => {
                const { peerBrokerId } = this.props;
                if (!peerBrokerId) {
                    return;
                }
                this.peer = new Peer(this.props.brokerId);
                this.peer.on('open', () => {
                    const { peerBrokerId } = this.props;
                    const connection = this.peer.connect(peerBrokerId);
                    connection.on('open', () => {
                        connection.on('data', (receivedData) => {
                            this.setState({
                                data: receivedData,
                                isConnected: true,
                            });
                        });
                    });
                    connection.on('close', () => {
                        this.setState({
                            isConnected: false,
                        });
                    });
                    connection.on('error', error => this.setState({ error }));
                });
                this.peer.on('error', error => this.setState({ error }));
            });
        };
        this.cleanup = () => {
            if (this.peer) {
                this.peer.destroy();
            }
        };
    }
    componentDidMount() {
        this.setPeer();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.peerBrokerId !== this.props.peerBrokerId) {
            this.setPeer();
        }
    }
    componentWillUnmount() {
        this.cleanup();
    }
    render() {
        const { data, isConnected, error } = this.state;
        return this.props.children({
            data,
            isConnected,
            error,
        });
    }
}
ReceivePeerState.defaultProps = {
    brokerId: '',
};
