import { useEffect, useState } from 'react';
const useReceivePeerState = (peerBrokerId, opts = { brokerId: '' }) => {
    const [state, setState] = useState(undefined);
    const [isConnected, setIsConnected] = useState(false);
    const [peer, setPeer] = useState(undefined);
    const [brokerId, setBrokerId] = useState(opts.brokerId);
    const [error, setError] = useState(undefined);
    useEffect(() => {
        if (!peerBrokerId) {
            return;
        }
        import('peerjs').then(({ default: Peer }) => {
            const localPeer = new Peer(opts.brokerId);
            setPeer(localPeer);
            localPeer.on('open', () => {
                if (brokerId !== localPeer.id) {
                    setBrokerId(localPeer.id);
                }
                const connection = localPeer.connect(peerBrokerId);
                connection.on('open', () => {
                    connection.on('data', (receivedData) => {
                        // We want isConnected and data to be set at the same time.
                        setState(receivedData);
                        setIsConnected(true);
                    });
                });
                connection.on('close', () => {
                    setIsConnected(false);
                });
                connection.on('error', err => setError(err));
            });
            localPeer.on('error', err => setError(err));
        });
        return () => {
            setIsConnected(false);
            peer && peer.destroy();
        };
    }, [peerBrokerId, opts.brokerId]);
    return [state, isConnected, error];
};
export default useReceivePeerState;
