import * as React from 'react';
export default class PeerStateProvider extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            connections: [],
            brokerId: this.props.brokerId,
            error: undefined,
        };
        this.setPeer = () => {
            this.cleanup();
            import('peerjs').then(({ default: Peer }) => {
                this.peer = new Peer(this.props.brokerId);
                this.peer.on('open', () => {
                    if (this.state.brokerId !== this.peer.id) {
                        this.setState({
                            brokerId: this.peer.id,
                        });
                    }
                });
                this.peer.on('connection', conn => {
                    this.setState(prevState => ({ connections: [...prevState.connections, conn] }));
                    // We want to immediately send the newly connected peer the current data.
                    conn.on('open', () => {
                        conn.send(this.props.value);
                    });
                });
                this.peer.on('error', error => this.setState({ error }));
            });
        };
    }
    componentDidMount() {
        this.setPeer();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.state.connections.forEach(conn => conn.send(this.props.value));
        }
        if (prevProps.brokerId !== this.props.brokerId) {
            this.setPeer();
        }
    }
    cleanup() {
        if (this.peer) {
            this.peer.destroy();
        }
    }
    componentWillUnmount() {
        this.cleanup();
    }
    render() {
        const { connections, brokerId, error } = this.state;
        return this.props.children({ connections, brokerId, error });
    }
}
PeerStateProvider.defaultProps = {
    brokerId: '',
};
