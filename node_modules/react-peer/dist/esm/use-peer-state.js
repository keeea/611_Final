import { useEffect, useState, useRef } from 'react';
const usePeerState = (initialState, opts = { brokerId: '' }) => {
    const [connections, setConnections] = useState([]);
    const [state, setState] = useState(initialState);
    const [error, setError] = useState(undefined);
    // We useRef to get around useLayoutEffect's closure only having access
    // to the initial state since we only re-execute it if brokerId changes.
    const stateRef = useRef(initialState);
    const [peer, setPeer] = useState(undefined);
    const [brokerId, setBrokerId] = useState(opts.brokerId);
    useEffect(() => {
        import('peerjs').then(({ default: Peer }) => {
            const localPeer = new Peer(opts.brokerId);
            setPeer(localPeer);
            localPeer.on('open', () => {
                if (brokerId !== localPeer.id) {
                    setBrokerId(localPeer.id);
                }
            });
            localPeer.on('error', err => setError(err));
            localPeer.on('connection', conn => {
                setConnections(prevState => [...prevState, conn]);
                // We want to immediately send the newly connected peer the current data.
                conn.on('open', () => {
                    conn.send(stateRef.current);
                });
            });
        });
        return () => {
            peer && peer.destroy();
        };
    }, [opts.brokerId]);
    return [
        state,
        (newState) => {
            setState(newState);
            stateRef.current = newState;
            connections.forEach(conn => conn.send(newState));
        },
        brokerId,
        connections,
        error,
    ];
};
export default usePeerState;
