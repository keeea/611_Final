import * as React from 'react';
import Peer from 'peerjs';
import { PeerError } from './types';
interface ReceivePeerStateProps<TState> {
    brokerId: string;
    peerBrokerId: string;
    children: (props: {
        data: TState | undefined;
        isConnected: boolean;
        error: PeerError | undefined;
    }) => React.ReactNode;
}
interface ReceivePeerStateState<TState> {
    data: TState | undefined;
    isConnected: boolean;
    error: PeerError | undefined;
}
export default class ReceivePeerState<TState> extends React.Component<ReceivePeerStateProps<TState>, ReceivePeerStateState<TState>> {
    static defaultProps: {
        brokerId: string;
    };
    state: {
        data: undefined;
        isConnected: boolean;
        error: undefined;
    };
    peer: Peer;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ReceivePeerStateProps<TState>): void;
    setPeer: () => void;
    cleanup: () => void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export {};
