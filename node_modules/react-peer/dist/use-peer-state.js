"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var usePeerState = function (initialState, opts) {
    if (opts === void 0) { opts = { brokerId: '' }; }
    var _a = react_1.useState([]), connections = _a[0], setConnections = _a[1];
    var _b = react_1.useState(initialState), state = _b[0], setState = _b[1];
    var _c = react_1.useState(undefined), error = _c[0], setError = _c[1];
    // We useRef to get around useLayoutEffect's closure only having access
    // to the initial state since we only re-execute it if brokerId changes.
    var stateRef = react_1.useRef(initialState);
    var _d = react_1.useState(undefined), peer = _d[0], setPeer = _d[1];
    var _e = react_1.useState(opts.brokerId), brokerId = _e[0], setBrokerId = _e[1];
    react_1.useEffect(function () {
        Promise.resolve().then(function () { return require('peerjs'); }).then(function (_a) {
            var Peer = _a.default;
            var localPeer = new Peer(opts.brokerId);
            setPeer(localPeer);
            localPeer.on('open', function () {
                if (brokerId !== localPeer.id) {
                    setBrokerId(localPeer.id);
                }
            });
            localPeer.on('error', function (err) { return setError(err); });
            localPeer.on('connection', function (conn) {
                setConnections(function (prevState) { return prevState.concat([conn]); });
                // We want to immediately send the newly connected peer the current data.
                conn.on('open', function () {
                    conn.send(stateRef.current);
                });
            });
        });
        return function () {
            peer && peer.destroy();
        };
    }, [opts.brokerId]);
    return [
        state,
        function (newState) {
            setState(newState);
            stateRef.current = newState;
            connections.forEach(function (conn) { return conn.send(newState); });
        },
        brokerId,
        connections,
        error,
    ];
};
exports.default = usePeerState;
