import * as React from 'react';
import Peer from 'peerjs';
import { PeerError } from './types';
interface PeerStateProviderProps<TState> {
    brokerId: string;
    value: TState;
    children: (props: {
        connections: Peer.DataConnection[];
        brokerId: string;
        error: PeerError | undefined;
    }) => React.ReactNode;
}
interface PeerStateProviderState {
    connections: Peer.DataConnection[];
    brokerId: string;
    error: PeerError | undefined;
}
export default class PeerStateProvider<TState> extends React.Component<PeerStateProviderProps<TState>, PeerStateProviderState> {
    static defaultProps: {
        brokerId: string;
    };
    peer: Peer;
    state: PeerStateProviderState;
    componentDidMount(): void;
    setPeer: () => void;
    componentDidUpdate(prevProps: PeerStateProviderProps<TState>): void;
    cleanup(): void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export {};
